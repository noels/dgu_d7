<?php
/**
 * @file
 * Drupal needs this blank file.
 */

/**
 * Implement HOOK_menu()
 */

use GuzzleHttp\Post\PostFile;

function dgu_organogram_menu() {
  $items['organogram/preview/data'] = array(
    'page callback' => 'dgu_organogram_preview_data',
    'access arguments' => array('access content'),
  );
  $items['organogram/preview'] = array(
    'page callback' => 'dgu_organogram_preview',
    'access arguments' => array('access content'),
  );
  $items['organogram/download_csv'] = array(
    'page callback' => 'dgu_organogram_download_csv',
    'access arguments' => array('access content'),
  );
  return $items;

}

/**
 * Implement hook_theme().
 */
function dgu_organogram_theme() {
  return array(
    'organogram_preview' => array(
      'template' => 'organogram_preview'
    ),
    'organogram_list_item' => array(
      'template' => 'organogram_list_item',
      '#preprocess' => 'media_element_process',
    ),
    'organogram_file_widget' => array(
      'render element' => 'element',
    ),
  );
}

function dgu_organogram_preview ($fid){
  $json = _dgu_organogram_read_index(_dgu_organogram_generate_csv_files($fid));
  drupal_json_output(array('status' => 0, 'data' => $json[0]));
}

/**
 * @param $index
 * @return json data
 */
function _dgu_organogram_read_index($index) {
  $handle = fopen($index, "r");
  $json = json_decode(fread($handle, filesize($index)));
  fclose($handle);

  return $json;
}

/**
 * @param $fid
 * @param $index
 */
function _dgu_organogram_generate_csv_files($fid) {
  $output = array();
  $ret = 0;
  $file = file_load($fid);
  if ($wrapper = file_stream_wrapper_get_instance_by_uri($file->uri)) {
    $filename = $wrapper->realpath();
  }
  $script = drupal_get_path('module', 'dgu_organogram') . '/bin/etl_to_csv.py';
  $command = "${script} '${filename}' " . file_directory_temp();
  exec($command, $output, $ret);
  preg_match("/([^:]*:\ )(.*)/i", $output[5], $matches);
  return $matches[2];
}


function dgu_organogram_preview_data($filename) {
  $file = file_directory_temp() . "/" . $filename;
  if (file_exists($file)) {
    header('Content-Description: File Transfer');
    header('Content-Type: application/octet-stream');
    header('Content-Disposition: attachment; filename='.basename($file));
    header('Expires: 0');
    header('Cache-Control: must-revalidate');
    header('Pragma: public');
    header('Content-Length: ' . filesize($file));
    ob_clean();
    flush();
    readfile($file);
    exit;
  } else {
    echo "file not found!\n file name:" . $file . "\n";
  }
}
function dgu_organogram_download_csv($fid) {

}

function dgu_organogram_form_ckan_publisher_form_alter(&$form, &$form_state, $form_id) {
  drupal_set_title("Organograms upload dashboard.");
  $form["#prefix"] = "<div class=\"blurb\"> Upload your latest Organograms spreadsheet here.<div>";
  $ckan_publisher = ckan_publisher_load($form['id']['#value']);
  $form['title']['#title'] = "Your publisher details";
  $form['ckan_id']['#title'] = "Your  data catalogue ID";
  $form['field_organogram'][LANGUAGE_NONE]['#title'] = "Manage your Organogram uploads";
  $form['#validate'] = array('dgu_organogram_form_validate');
  $form['#submit'] = array('dgu_organogram_form_submit');
  $form['#suffix'] = theme('organogram_preview');
  hide($form['redirect']);

  $result = db_query("SELECT fid, deadline_date FROM dgu_organogram where id = " . $ckan_publisher->id );
  $dates = $result->fetchAllKeyed();
  $form_state['organogram_dates'] = $dates;
  $result = db_query("SELECT fid, publish_date FROM dgu_organogram where id = " . $ckan_publisher->id );
  $dates = $result->fetchAllKeyed();
  $form_state['publish_dates'] = $dates;

  drupal_add_css(drupal_get_path('module', 'dgu_organogram') . '/css/organogram.css',
    array('group' => CSS_THEME, 'every_page' => TRUE));
  drupal_add_js(drupal_get_path('module', 'dgu_organogram') . '/js/d3.v3.js');
  drupal_add_js(drupal_get_path('module', 'dgu_organogram') . '/js/organogram.js');
}

function dgu_organogram_form_submit($form, &$form_state){
  $parents = $form_state['triggering_element']['#array_parents'];
  $button_key = array_pop($parents);
  if ('submit' == $button_key){
    form_state_values_clean($form_state);
    $files_count = count($form_state['values']['field_organogram'][LANGUAGE_NONE]);
    if (!$form_state['values']['field_organogram'][LANGUAGE_NONE][$files_count -1][fid]){
      unset($form_state['values']['field_organogram'][LANGUAGE_NONE][$files_count -1]);
    }
    $ckan_publisher = New CKANPublisher($form_state['values']);
    $ckan_publisher->save();
  }
}

function dgu_organogram_field_widget_form_alter(&$element, &$form_state, $context) {
  if ($element['#field_name'] == 'field_organogram'){
    $children = element_children($element);
    foreach ($children as $key){
      $element[$key]['#process'][] = 'dgu_organogram_after';
    }
    $element['#theme'] = 'organogram_file_widget';
  }
}

function _dgu_organogram_remove_form_control($class){
  return ('form-control' != $class);
}

/**
 * Returns HTML for a group of file upload widgets.
 *
 * @param $variables
 *   An associative array containing:
 *   - element: A render element representing the widgets.
 *
 * @ingroup themeable
 */
function theme_organogram_file_widget($variables) {
  $element = $variables['element'];

  // Special ID and classes for draggable tables.
  $weight_class = $element['#id'] . '-weight';
  $table_id = $element['#id'] . '-table';

  // Build up a table of applicable fields.
  $headers = array();
  $headers[] = t('File information');
  if ($element['#display_field']) {
    $headers[] = array(
      'data' => t('Display'),
      'class' => array('checkbox'),
    );
  }
  $headers[] = t('Weight');
  $headers[] = t('Operations');

  // Get our list of widgets in order (needed when the form comes back after
  // preview or failed validation).
  $widgets = array();
  foreach (element_children($element) as $key) {
    $widgets[] = &$element[$key];
  }
  usort($widgets, '_field_sort_items_value_helper');

  $rows = array();
  foreach ($widgets as $key => &$widget) {
    // Save the uploading row for last.
    if ($widget['#file'] == FALSE) {
      $widget['#title'] = $element['#file_upload_title'];
      $widget['#description'] = $element['#file_upload_description'];
      continue;
    }

    // Delay rendering of the buttons, so that they can be rendered later in the
    // "operations" column.
    $operations_elements = array();
    foreach (element_children($widget) as $sub_key) {
      if (isset($widget[$sub_key]['#type']) && ($widget[$sub_key]['#type'] == 'submit'  || $widget[$sub_key]['#type'] == 'button' )) {
        //remove the form-control class
        $widget[$sub_key]['#attributes']['class'] = array_filter($widget[$sub_key]['#attributes']['class'], '_dgu_organogram_remove_form_control');
        hide($widget[$sub_key]);
        $operations_elements[] = &$widget[$sub_key];
      }
      $deadline_dates = array();
      if (isset($widget[$sub_key]['#type']) && ($widget[$sub_key]['#type'] == 'deadline_date' )){
        $widget[$sub_key]['#type'] = 'textfield';
        hide($widget[$sub_key]);
        $deadline_dates[] = &$widget[$sub_key];
      }
    }

    // Delay rendering of the "Display" option and the weight selector, so that
    // each can be rendered later in its own column.
    if ($element['#display_field']) {
      hide($widget['display']);
    }
    hide($widget['_weight']);

    // Render everything else together in a column, without the normal wrappers.
    $widget['#theme_wrappers'] = array();
    $information = drupal_render($widget);

    // Render the previously hidden elements, using render() instead of
    // drupal_render(), to undo the earlier hide().
    $operations = '';
    foreach ($operations_elements as $operation_element) {
      $operations .= render($operation_element);
    }
    $display = '';
    if ($element['#display_field']) {
      unset($widget['display']['#title']);
      $display = array(
        'data' => render($widget['display']),
        'class' => array('checkbox'),
      );
    }
    $widget['_weight']['#attributes']['class'] = array($weight_class);
    $weight = render($widget['_weight']);

    // Arrange the row with all of the rendered columns.
    $row = array();
    $row[] = $information;
    if ($element['#display_field']) {
      $row[] = $display;
    }
    $row[] = $weight;
    $row[] = $operations;
    $rows[] = array(
      'data' => $row,
      'class' => isset($widget['#attributes']['class']) ? array_merge($widget['#attributes']['class'], array('draggable')) : array('draggable'),
    );
  }

  drupal_add_tabledrag($table_id, 'order', 'sibling', $weight_class);

  $output = '';
  $output = empty($rows) ? '' : theme('table', array('header' => $headers, 'rows' => $rows, 'attributes' => array('id' => $table_id)));
  $output .= drupal_render_children($element);
  return $output;
}

function dgu_organogram_after($element, $form_state){
  foreach (array('upload_button', 'remove_button') as $key) {
    $element[$key]['#submit'][] = 'dgu_organogram_organogram_submit';
    $element[$key]['#limit_validation_errors'] = array(array_slice($element['#parents'], 0, -1));
  }

  if ($element['#file']) {
    $attributes = array(
      'data-toggle-pane' => 'organogram-preview',
      'class' => array('js-organogram-preview-btn', 'form-submit'),
      'data-organogram-file' => $element['#file']->fid,
    );
    $element['filename']['#markup'] .= "<span class='deadline_date'>Snapshot date: ". date('d-m-Y', $form_state['organogram_dates'][$element['#file']->fid]?:0) . "<span> ";
    $element['filename']['#markup'] .= "<span class='updload_date'>Uploaded: ".date('d-m-Y', $element['#entity']->created) ."<span>";
    $published = $form_state['publish_dates'][$element['#file']->fid];
    if ($published){
      $element['filename']['#markup'] .= "<span class='published_date'>Published: ". date('d-m-Y', $published) . "<span> ";

    }
    $btnName = "preview_organogram_{$element['#language']}_{$element['#delta']}_button";
    $element['preview'] = array(
      '#name' => $btnName,
      '#type' => 'button',
      '#attributes' => $attributes,
      '#value' => t('Preview'),
    );
    $btnName = "publish_organogram_{$element['#language']}_{$element['#delta']}_button";
    $saved = $element['#file']->status == 1;
    $element['publish'] = array(
      '#name' => $btnName,
      '#type' => 'submit',
      '#value' => t('Publish'),
      '#submit' => array('dgu_organogram_organogram_publish'),
      '#attributes' => array('data-file-fid' =>  $element['#file']->fid?:0),
      '#disabled' => $published || !$saved,
    );
    $element['preview']['#attached']['js'][] = array(
      'data' => array('file' => $element['#file']->filename),
      'type' => 'setting',
    );
    $element['deadline_date'] = array(
      '#type' => 'hidden',
      '#value' => $form_state['organogram_dates'][$element['#file']->fid],
    );
    $element['publish_date'] = array(
      '#type' => 'hidden',
      '#value' => $form_state['publish_dates'][$element['#file']->fid],
    );
    //finally remove the form-control class put on by the bootstrap module which is unaware of managed_files
    $element['#attributes']['class'] = array_filter($element['#attributes']['class'], '_dgu_organogram_remove_form_control');
  } else {
    $today = getdate();
    $next_year = $today['year'] + 1;
    if ($today['mon'] <= 6){
      $date1 = new DateTime("${today['year']}-03-31");
      $date2 = new DateTime("${today['year']}-09-30");
    } else if ($today['mon'] <= 12){
      $date1 = new DateTime("${today['year']}-09-30");
      $date2 = new DateTime("${next_year}-03-31");
    }
    $dates = array($date1->getTimestamp() => $date1->format('d-m-Y'), $date2->getTimestamp() => $date2->format('d-m-Y'));

    $element['deadline_date'] = array(
      '#label' => 'Choose date',
      '#type' => 'select',
      '#options' => $dates,
      '#default_value' => $dates[0],
    );
  }
  return $element;
}


function dgu_organogram_organogram_submit($form, &$form_state) {
  db_query("DELETE FROM ckan_organogram where id = " . $form['id']['#value'] );
  foreach ($form_state['values']['field_organogram'][LANGUAGE_NONE] as $organogram){
    if ($organogram['deadline_date']){
      $publish_date =  $organogram['publish_date']?:0;
      db_query("INSERT INTO dgu_organogram VALUES (".$form['id']['#value'] . ", " . $organogram['fid'] . ", " . $organogram['deadline_date'] .", " . $publish_date .")");
    }
  }
  $commands = array();

// Add other commands

  $commands[] = ajax_command_prepend('div#ajax-status-messages-wrapper', theme('status_messages'));

  return array('#type' => 'ajax', '#commands' => $commands);
}

function _dgu_organogram_package_json($group){

  $package = array(
      'name' => 'organogram-' . $group['name'],
      'title' => 'Organogram of Roles & Salaries',
      'owner_org' => $group['name'],
      'license_id' => 'uk-ogl',
      'notes' => 'Organogram (organisation chart) showing all staff roles. Names and salaries are also listed for the Senior Civil Servants. Organogram data is released by all central government departments and their agencies since 2010. Snapshots for 31st March and 30th September are published by 6th June and 6th December each year. The published data is validated and released in CSV and RDF format and OGL-licensed for reuse.',
      'tags' =>
        array (
          0 => array(
                'name' => 'organograms',
              ),
        ),
      'extras' =>
        array (
          0 => array(
                'key' => 'geographic_coverage',
                'value' => '111100: United Kingdom (England, Scotland, Wales, Northern Ireland)',
              ),
          1 => array(
                'key' => 'mandate',
                'value' => 'https://www.gov.uk/government/news/letter-to-government-departments-on-opening-up-data',
              ),
          2 => array(
                'key' => 'update_frequency',
                'value' => 'biannually',
              ),
          3 => array(
                'key' => 'temporal_coverage-from',
                'value' => '2010',
              ),
          4 => array(
                'key' => 'theme-primary',
                'value' => 'Government',
              ),
          5 => array(
                'key' => 'import_source',
                'value' => 'organograms_v2',
              ),
        ),
    );
  return json_encode($package);
}

function dgu_organogram_organogram_publish($form, &$form_state){
  $client = _dgu_organogram_get_ckan_api_client();
  $group = _dgu_organogram_get_ckan_group($form['ckan_id']['#value']);
  if (!$group) {
    drupal_set_message("Unable to publish organogram. Group not found group id: " . $form['ckan_id']['#value'] );
    return;
  }

  $package = _dgu_organogram_get_organogram_package_for_publisher($group['name']);
  if (!$package) {
      $packageJson = _dgu_organogram_package_json($group);
      $response = $client->PackageCreate(array('data'=>$packageJson));
      $createPackageResponse = $response->toArray();
      $package = $createPackageResponse['result'];
      drupal_set_message("Package id: {$package['id']} created.");
  } else {
    drupal_set_message("Package id: {$package['id']} updated.");
  }

  //Ensure that we have a valid file fid before carrying on.
  $fid = $form_state['triggering_element']['#attributes']['data-file-fid'];
  if ($fid){
    $file = file_load($fid);
    list($junior_csv, $senior_csv) = _dgu_organogram_get_csv_filenames( _dgu_organogram_read_index(_dgu_organogram_generate_csv_files($fid)));
    $organogram_date = date( 'Y-m-d', $form_state['organogram_dates'][$file->fid]);
    $organogram_path = '/organogram/' . $group['result']['name']  . '/' . $organogram_date . '/';
    $organogram_file_location = DRUPAL_ROOT . '/' . variable_get('file_public_path') . $organogram_path;
    if (!file_exists($organogram_file_location)) {
      mkdir($organogram_file_location, 0777, true);
    }
    copy (  file_directory_temp() . $junior_csv , $organogram_file_location .   $junior_csv);
    copy (  file_directory_temp() . $senior_csv , $organogram_file_location .   $senior_csv);
    $files_dir = conf_path() . '/files/' . $organogram_path;
    $resource  = new stdClass;
    $resource->package_id = $package['id'];
    $resource->date = $organogram_date;


    try {
      $resource->url = 'http://data.gov.uk/' . $files_dir . $file->filename;
      $resource->format = 'XLS';
      $resource->description = 'Organogram - XML data';
      _dgu_organogram_create_or_update_resource($package, $resource, $organogram_date, 'XML');

      $resource->url = 'http://data.gov.uk/' . $files_dir . $junior_csv;
      $resource->format = 'CSV';
      $resource->description = 'Organogram - Junior CSV data';
      _dgu_organogram_create_or_update_resource($package, $resource, $organogram_date, 'Junior');

      $resource->url = 'http://data.gov.uk/' . $files_dir . $senior_csv;
      $resource->format = 'CSV';
      $resource->description = 'Organogram - Senior CSV data';
      _dgu_organogram_create_or_update_resource($package, $resource, $organogram_date, 'Senior');

    } catch (Exception $e){
        drupal_set_message("Unable to update {$resource->format} resource for dataset id: {$package['id']}. Try again later.");
        return;
    }

    try {
      _dgu_organogram_post_files_to_epimorphics($organogram_date, $organogram_file_location . $senior_csv, $organogram_file_location . $junior_csv);
      db_query("UPDATE dgu_organogram SET publish_date = '" .  $form_state['organogram_dates'][$fid] . "' where fid = " . $fid);
    } catch (Exception $e) {
      drupal_set_message("Unable to publish this dataset to the triple-store. Please try later.");
    }
  }
}

/**
 * @param $package
 * @param $resource
 * @param $organogram_date
 * @param $client
 */
function _dgu_organogram_create_or_update_resource($package, $resource, $organogram_date, $organogram_file_type) {
  $client = _dgu_organogram_get_ckan_api_client();
  $resource_id = _dgu_organogram_find_resource_id($package['resources'], $resource->format, $organogram_date, $organogram_file_type);
  if ($resource_id) {
    //Update resource
    $resource->id = $resource_id;
    $response = $client->ResourceUpdate(array('data' => json_encode($resource)));
    drupal_set_message("Resource id: {$resource_id} updated.");

  }
  else {
    //create resource
    $response = $client->ResourceCreate(array('data' => json_encode($resource)));
    drupal_set_message("Resource id: {$response['result']['id']} created.");
  }
  return $response;
}

/**
 * @param $package
 * @param $format
 * @param $organogram_date
 * @return mixed
 */
function _dgu_organogram_find_resource_id($resources, $format, $organogram_date, $organogram_file_type) {
  $resource_id = FALSE;
  foreach ($resources as $resource) {
    $date1 = DateTime::createFromFormat ('d/m/Y', $resource['date']);
    $date2 = DateTime::createFromFormat ('Y-m-d', $organogram_date);
    if ($resource['format'] == $format &&  $date1->diff($date2)->days < 1) {
      if (strstr($resource['description'], $organogram_file_type)){
        $resource_id = $resource['id'];
        break;
      }
    }
  }

  return $resource_id;
}

/**
 * @param $fid
 * @return array
 */
function _dgu_organogram_get_csv_filenames($json) {
  $stem = $json[0]->value;
  $junior_csv = $stem . '-junior.csv';
  $senior_csv = $stem . '-senior.csv';

  return array($junior_csv, $senior_csv);
}

function _dgu_organogram_get_ckan_group($group_id) {
  $client = _dgu_organogram_get_ckan_api_client();
  $response = $client->GetGroup(array('id' => $group_id));
  $group = $response->toArray();

  return $group['success'] ? $group['result'] : null;
}


function _dgu_organogram_get_organogram_package_for_publisher($publisher_name){
  $client = _dgu_organogram_get_ckan_api_client();
  $response = $client->PackageSearch(array('fq' => "publisher: $publisher_name import_source:organograms_v2"));
  $searchResult = $response->toArray();

  return ($searchResult['result']['count'] == 1) ? $searchResult['result']['results'][0] : null;
}


function _dgu_organogram_get_ckan_api_client() {
  static $client = null;
  if (!$client){
    require_once 'sites/all/vendor/autoload.php';
    $client = Silex\ckan\CkanClient::factory(
      array(
        'baseUrl' => variable_get('ckan_url', ''),
        'apiKey' => variable_get('ckan_apikey', ''),
      )
    );
  }

  return $client;
}

function _dgu_organogram_post_files_to_epimorphics($release, $senior_csv, $junior_csv){
  $client = new \Guzzle\Service\Client();
  $request = $client->createRequest('POST', variable_get('epimorphics_uri', 'http://46.43.41.16:8080/convert'))
    ->addPostFields(array('release' => $release))
    ->addPostFiles(array('senior-csv' => $senior_csv))
    ->addPostFiles(array('junior-csv' => $junior_csv));
  $response = $client->send($request);
}

function dgu_organogram_form_validate($form, &$form_state){

}
