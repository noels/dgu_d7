<?php
/**
 * @file
 * Code for the DGU Moderation feature.
 */

include_once 'dgu_moderation.features.inc';

define('PUBLISHED_GRANT', 2147483647); // maximum possible value (avialable in Solr) to avoid conflict with $node->uid
define('MODERATOR_GRANT', 2147483646); // maximum possible value (avialable in Solr) -1 to avoid conflict with $node->uid

/**
 * Implements hook_menu_alter().
 */
function dgu_moderation_menu_alter(&$items) {
  // Override the node edit menu item title.
  $items['node/%node/edit']['title callback'] = 'dgu_moderation_edit_tab_title';
  $items['node/%node/edit']['title arguments'] = array(1);

  // Override the node view menu item title.
  $items['node/%node/view']['title callback'] = 'dgu_moderation_view_tab_title';
  $items['node/%node/view']['title arguments'] = array(1);

  // Override workbench_moderation_moderate_callback().
  $items['node/%node/moderation/%/change-state/%']['page callback'] = 'dgu_moderation_moderate_callback';


  // Rename 'My Workbench' to 'Manage my content'.
  $items['admin/workbench']['title'] = 'Manage my content';
}

/**
 * Implements hook_menu_breadcrumb_alter().
 */
function dgu_moderation_menu_breadcrumb_alter(&$active_trail, $item) {
  $destination = drupal_get_destination();
  if ($item['path'] == 'node/%/moderation/%/change-state/%' && $destination['destination'] == 'admin/workbench/needs-review') {
    $active_trail = array(
      array('title' => 'Home', 'href' => '', 'localized_options' => array()),
      array('title' => 'Needs review', 'href' => 'admin/workbench/needs-review', 'localized_options' => array()),
    );
  }
}

/**
 * Change the name of the node edit tab, conditionally.
 *
 * @param $node
 *   The node being acted upon.
 *
 * @return
 *   The title for the tab.
 */
function dgu_moderation_edit_tab_title($node) {

  foreach (module_implements('dgu_moderation_moderator_permission') as $module) {
    $function = $module . '_dgu_moderation_moderator_permission';
    if ($function($node)) {
      // Don't change the title if user is a moderator.
      return t('Edit');
    }
  }
  // If user isn't a moderator apply workbench moderation logic.
  return workbench_moderation_edit_tab_title($node);

}

/**
 * Change the name of the node edit tab, conditionally.
 *
 * @param $node
 *   The node being acted upon.
 *
 * @return
 *   The title for the tab.
 */
function dgu_moderation_view_tab_title($node) {
  // Don't change the title if user is a moderator.
  foreach (module_implements('dgu_moderation_moderator_permission') as $module) {
    $function = $module . '_dgu_moderation_moderator_permission';
    if ($function($node)) {
      // Don't change the title if user is a moderator.
      return t('View');
    }
  }
  // If user isn't a moderator apply workbench moderation logic.
  return workbench_moderation_view_tab_title($node);
}


/**
 * Override workbench_moderation_moderate_callback() to add message to the user when changing back to draft.
 * See dgu_moderation_menu_alter().
 */
function dgu_moderation_moderate_callback($node, $state) {
  if (!isset($_GET['token']) || !drupal_valid_token($_GET['token'], "{$node->nid}:{$node->vid}:$state")) {
    return MENU_ACCESS_DENIED;
  }

  if ($state == 'draft' && isset($node->workbench_moderation['current']) && $node->workbench_moderation['current']->state == 'needs_review') {
    drupal_set_title('Revert to draft');
    return drupal_get_form('dgu_moderation_message_back_to_draft', $node, $state);
  }

  workbench_moderation_moderate($node, $state);
  drupal_goto(isset($_GET['destination']) ? $_GET['destination'] : 'node/' . $node->nid . '/moderation');
}

function dgu_moderation_message_back_to_draft($form, &$form_state, $node, $state) {
  global $base_url;
  $type = strtolower(node_type_get_name($node));

  $form['title'] = array(
    '#markup' => '<p>You are about to change moderation state of ' . $type . ' <a href="' . $node->path['alias'] . '">'
      . $node->title . '</a> from <strong>Needs review</strong> to <strong>Draft</strong>.</p>'
      . '<p>Please provide additional information for the user why you are changing state to draft.',
  );
  $form['message'] = array(
    '#title' => 'Message for the submitter',
    '#type' => 'textarea',
    '#default_value' => "Your " . $type . ": " . $node->title . "\nhas been reverted to draft state.\n\nThis is direct link to the edit form:\n" . $base_url . base_path() . "node/" . $node->nid . "/edit\n\n",
    '#description' => 'Description here',
    '#rows' => 15,
    '#resizable' => TRUE,
  );
  $form['preview_button'] = array(
    '#type' => 'submit',
    '#value' => 'Preview',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Change to Draft',
  );
  if (empty($form_state['input']['op']) || isset($form_state['input']['op']) && $form_state['input']['op'] != 'Preview') {
    $form['submit']['#disabled'] = TRUE;
  }

  $form['node'] = array(
    '#type' => 'value',
    '#value' => $node,
  );
  $form['state'] = array(
    '#type' => 'value',
    '#value' => $state,
  );
  return $form;
}

function dgu_moderation_message_back_to_draft_validate($form, &$form_state) {
  global $base_url;
  // Don't submit the form.
  if($form_state['clicked_button']['#value'] == 'Preview') {
    $form_state['rebuild'] = TRUE;

    $submitter_uid = $form_state['values']['node']->uid;
    $query = db_select('users', 'u');
    $query->fields('u', array('name'));
    $query->condition('u.uid', $submitter_uid);
    $submitter = l($query->execute()->fetchField(), 'user/' . $submitter_uid);
    drupal_set_message('<h4><strong>User ' . $submitter. ' will receive following message:</strong></h4>' . nl2br($form_state['values']['message'] . "\n\nTo see all your draft content please go to\n" . $base_url . base_path() .  'admin/workbench/content/drafts'));
  }
}

function dgu_moderation_message_back_to_draft_submit($form, &$form_state) {

  $state_draft_message = &drupal_static('state_draft_message');
  $state_draft_message = $form_state['values']['message'];
  workbench_moderation_moderate($form['node']['#value'], $form['state']['#value']);
  drupal_goto(isset($_GET['destination']) ? $_GET['destination'] : 'node/' . $form['node']['#value']->nid . '/moderation');
}

function dgu_moderation_workbench_moderation_transition($node, $previous_state, $new_state) {

  global $base_url;

  // Use static cache to get this message available in hook_tokens().
  $moderation_state_change_short = & drupal_static('moderation_state_change_short');
  $moderation_state_change_full = & drupal_static('moderation_state_change_full');

  // Message from dgu_moderation_message_back_to_draft form.
  $state_draft_message = &drupal_static('state_draft_message');
  $type = strtolower(node_type_get_name($node));

  if ($previous_state == 'needs_review' && $new_state == 'published') {
    $moderation_state_change_full = "Your " . $type . ": " . $node->title . "\n" . $base_url . base_path() . $node->path['alias'] . "\nhas been published.";
    $moderation_state_change_short = 'published';

  }
  elseif($previous_state == 'needs_review' && $new_state == 'draft' && isset($state_draft_message)) {
    // The same text "To see all your draft content..." is repeated in dgu_moderation_message_back_to_draft().
    $moderation_state_change_full = $state_draft_message . "\n\nTo see all your draft content please go to\n" . $base_url . base_path() .  'admin/workbench/content/drafts';
    $moderation_state_change_short = 'reverted to draft';
  }
  else {
    return;
  }

  // This is taken from message stack examples.
  // It's related to message_notify how it stores rendered subject and body via view modes.
  $options = array(
    'rendered fields' => array(
      'message_notify_email_subject' => 'field_message_rendered_subject',
      'message_notify_email_body' => 'field_message_rendered_body',
    ),
  );

  // Get dgu_moderation_state_change message bundle and set required fields.
  $message = message_create('dgu_moderation_state_change');
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_node_reference->set($node);

  // TODO - test this with two different emails - one for submitter second one for moderator
  message_subscribe_send_message('node', $node, $message, $options);
}


/**
 * Implements hook_page_alter().
 *
 * Remove unwanted bit added to the node edit form by workbench moderation module.
 */
function dgu_moderation_page_alter(&$page) {

  //if (isset($page['content']['workbench_block']) && isset($page['content']['system_main']['#form_id']) && strlen($page['content']['system_main']['#form_id']) > 10 && substr($page['content']['system_main']['#form_id'], -10,10) == '_node_form') {
  if (isset($page['content']['workbench_block']) && $page['content']['system_main']['#node_edit_form']) {
    unset($page['content']['workbench_block']);
    unset($page['help']['system_help']);

  }
}

/**
 * Helper function called in content type specific form_hook_alter().
 */
function dgu_moderation_node_forms_alter(&$form) {
  $form['revision_information']['#type'] = 'hidden';
  $form['actions']['publish']['#access'] = TRUE;
  $form['actions']['publish']['#value'] = 'Submit for moderation';
  $form['actions']['publish']['#type'] = 'submit';
  $form['actions']['publish']['#weight'] = 6;
  $form['actions']['publish']['#submit'] = $form['actions']['submit']['#submit'];
  $form['actions']['submit']['#value'] = 'Save draft';
  $form['#submit'][] = 'dgu_moderation_node_submit';
}

function dgu_moderation_node_forms_after_build($form) {
  if (isset($form['options']['workbench_moderation_state_new']['#value'])) {
    $form['options']['workbench_moderation_state_new']['#value'] = $form['workbench_moderation_state_current']['#value'];
  }
  elseif ($form['revision_information']['workbench_moderation_state_new']['#value']) {
    $form['revision_information']['workbench_moderation_state_new']['#value'] = $form['workbench_moderation_state_current']['#value'];
  }
  return $form;
}

/**
 * Custom submit function for data_set_request content type.
 */
function dgu_moderation_node_submit($form, &$form_state) {
  if (isset($form_state['clicked_button'])) {

    $content_types = node_type_get_types();
    $content_type = $content_types[$form['#node']->type]->name;
    $action = empty($form['#node']->nid) ? 'created' : 'updated';

    if ($form_state['clicked_button']['#value'] == "Submit for moderation") {
      $form_state['values']['workbench_moderation_state_new'] = 'needs_review';
      $message = & drupal_static('dgu_moderation_message');
      $message = 'Your ' . $content_type . ' has been ' . $action . ' and submitted for moderation. You can update it in <a href="/admin/workbench">Manage my content</a> section.<br />Please ensure your <a href="/user">profile</a> is up to date as we may use these details to contact you about your ' . $content_type . '.';
    }
    elseif ($form_state['clicked_button']['#value'] == "Save draft") {
      $form_state['values']['workbench_moderation_state_new'] = 'draft';
      $message = & drupal_static('dgu_moderation_message');
      $message = 'Your draft ' . $content_type . ' has been ' . $action . '. You can update it in <a href="/admin/workbench/content/drafts">My Drafts</a> section.<br />Please ensure your <a href="/user">profile</a> is up to date as we may use these details to contact you about your ' . $content_type . '.';
    }
  }
}

/**
 * Implements hook_exit().
 */
function dgu_moderation_exit() {
  if ($message = drupal_static('dgu_moderation_message')) {
    // Remove all status messages - most likely nothing more than '... has been created/updated'.
    drupal_get_messages('status');
    // Add a message created in dgu_data_set_request_node_submit().
    drupal_set_message($message);
  }
}


/**
 * Implements hook_node_presave().
 */
function dgu_moderation_node_presave($node) {
  if ($_SERVER['REQUEST_URI'] == '/quickedit/entity/node/' . $node->nid && user_access('edit any ' . $node->type . ' content')) {
    // Avoid reverting to draft published nodes during quick editing.
    $node->workbench_moderation_state_new = $node->workbench_moderation['published']->state;
  }
}


/**
 * Implements hook_node_load().
 */
function dgu_moderation_node_load($nodes, $types) {
  // Hack to avoid administrators moderating themselves when using quickedit module.
  // We have other hacks in form alter hooks, this one fixes node_save called without submitting a node edit form.
  $backtrace = debug_backtrace();
  $count = count($backtrace);
  if ($backtrace[--$count]['function'] == '_drupal_shutdown_function' && $backtrace[--$count]['function'] == 'call_user_func_array' && $backtrace[--$count]['function'] == 'workbench_moderation_store') {
    $node = reset($nodes);
    // If user can edit any nodes of this type then we don't want this user moderate self actions.
    // We terminate execution here to avoid workbench moderation reverting current revision to previous revision and preserve the state.
    if ($_SERVER['REQUEST_URI'] == '/quickedit/entity/node/' . $node->nid && user_access('edit any ' . $node->type . ' content')) {
      die;
    }
  }
}


function dgu_moderation_access($account, $node, $permission) {
  if (!($node->uid == $account->uid || user_access($permission) || $node->status)) {
    return NODE_ACCESS_DENY;
  }
}

function dgu_moderation_get_node_grants(&$node) {
  $grants = array();
  $grants[] = array(
    'realm' => 'moderation',
    'gid' => MODERATOR_GRANT,
    'grant_view' => 1,
    'grant_update' => 1,
    'grant_delete' => 1,
    'priority' => 1,

  );
  if ($node->uid) {
    // Grant author permission only if author is not anonymous.
    $grants[] = array(
      'realm' => 'moderation',
      'gid' => $node->uid,
      'grant_view' => 1,
      'grant_update' => 1,
      'grant_delete' => 1,
      'priority' => 1,
    );
  }
  if ($node->status == 1) {
    $grants[] = array(
      'realm' => 'moderation',
      'gid' => PUBLISHED_GRANT,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 1,
    );
  }
  return $grants;
}

function dgu_moderation_get_account_grants(&$account, $permission) {
  $grants = array();
  $grants['moderation'] = array($account->uid);
  $grants['moderation'] = array($account->uid, PUBLISHED_GRANT);
  if (user_access($permission, $account)) {
    $grants['moderation'] = array(MODERATOR_GRANT);
  }
  return $grants;
}

/**
 * Implements hook_token_info().
 */
function dgu_moderation_token_info() {
  $info['tokens']['message']['dgu_moderation_state_change_short'] = array(
    'name' => t('Moderation state change short'),
    'description' => t('Returns short moderation change message'),
  );
  $info['tokens']['message']['dgu_moderation_state_change_full'] = array(
    'name' => t('Moderation state change full'),
    'description' => t('Returns full moderation change message'),
  );
  return $info;
}

/**
 * Implements hook_tokens().
 */
function dgu_moderation_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'message') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'dgu_moderation_state_change_short':
          $replacements[$original] = drupal_static('moderation_state_change_short');
          break;
        case
        'dgu_moderation_state_change_full':
          $replacements[$original] = drupal_static('moderation_state_change_full');
          break;
      }
    }
  }
  return $replacements;
}

