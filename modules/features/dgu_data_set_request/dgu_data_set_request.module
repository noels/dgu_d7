<?php
/**
 * @file
 * Code for the DGU Data set request feature.
 */


define('DATA_REQUEST_MODERATION_PERMISSION', 'edit any dataset_request content');
define('PUBLIC_DATA_REQUEST_GRANT', 2147483647);    // maximum possible value (avialable in Solr) to avoid conflict with $node->uid
define('DATA_REQUEST_MODERATOR_GRANT', 2147483646); // maximum possible value (avialable in Solr) -1 to avoid conflict with $node->uid

include_once 'dgu_data_set_request.features.inc';

/**
 * Implements hook_menu_breadcrumb_alter().
 */
function dgu_data_set_request_menu_breadcrumb_alter(&$active_trail, $item) {
  switch ($item['path']) {
    case 'data-request':
      $active_trail = array(
        current($active_trail),
        array('title' => 'Data Requests', 'href' => 'data-request', 'localized_options' => array()),
        array('title' => 'Data Requests', 'href' => 'data-request', 'localized_options' => array()),
      );
      drupal_set_title('Latest data requests');
      break;
    case 'data-request/blogs':
      $active_trail = array(
        current($active_trail),
        array('title' => 'Data Requests', 'href' => 'data-request', 'localized_options' => array()),
      );
      drupal_set_title('ODUG Blogs');
      break;
    case 'data-request/minutes':
      $active_trail = array(
        current($active_trail),
        array('title' => 'Data Requests', 'href' => 'data-request', 'localized_options' => array()),
      );
      drupal_set_title('ODUG Minutes');
      break;
  }
  if (isset($item['map'][1]->type) && $item['map'][1]->type == 'dataset_request') {
    $active_trail[2] = $active_trail[1];
    $active_trail[1] = array('title' => 'Data Requests', 'href' => 'data-request', 'localized_options' => array());
  }
}

function dgu_data_set_request_dgu_moderation_moderator_permission(&$node) {
  if ($node->type == 'dataset_request') {
    if (user_access(DATA_REQUEST_MODERATION_PERMISSION) || is_or_was_assignee($node->nid)) {
      return TRUE;
    }
  }
}

/**
 * Implements Hook hook_form_FORM_ID_alter which:
 */
function dgu_data_set_request_form_dataset_request_node_form_alter(&$form, &$form_state, $form_id) {
  $node = $form['#node'];
  drupal_set_title('Create a dataset request');
  unset($form['actions']['preview']);
  $form['#attributes']['class'][] = "boxed";

  if (user_access(DATA_REQUEST_MODERATION_PERMISSION) || (isset($node->nid) && is_or_was_assignee($node->nid))) {
    $form['#after_build'][] = 'dgu_moderation_node_forms_after_build';

    $form['submit_top'] = $form['actions']['submit'];
    $form['submit_top']['#weight'] = -100;
    $form['#attached']['css'][] = array(
      'data' => '#edit-submit-top {float: right;}',
      'type' => 'inline',
    );
    $assignee_uids = dgu_data_set_request_get_assignees($node->nid);
    $assignees = array();
    foreach($assignee_uids as $uid) {
      $user = user_load($uid);
      if (empty($form['field_assignee'][LANGUAGE_NONE]['#default_value'][0]) || isset($form['field_assignee'][LANGUAGE_NONE]['#default_value'][0]) && $form['field_assignee'][LANGUAGE_NONE]['#default_value'][0] != $user->uid) {
        $assignees[] = $user->name;
      }
    }
    if(!empty($assignees)) {
      $assignees = '<div class="help-block">Previous RM\'s: ' . implode(', ', $assignees) . '</div>';
      $form['field_assignee']['#suffix'] = $assignees;
    }
  }

  else {
    dgu_moderation_node_forms_alter($form);
  }
}

function dgu_data_set_request_get_assignees($nid) {
  // TODO add static cache
  $query = db_select('field_revision_field_assignee', 'fpa')
    ->distinct()
    ->fields('fpa', array('field_assignee_uid'))
    ->condition('entity_type', 'node')
    ->condition('entity_id', $nid);
  return $query->execute()->fetchCol();
}

function dgu_data_set_request_node_access($node, $op, $account) {
  if ($op != 'create' && $node->type == 'dataset_request') {
    if(!($node->uid == $account->uid || user_access(DATA_REQUEST_MODERATION_PERMISSION))) {
      if(isset($node->field_publication_preference[LANGUAGE_NONE][0]['value']) && $node->field_publication_preference[LANGUAGE_NONE][0]['value'] == 0) {
        $assignees = dgu_data_set_request_publisher_assignee_get_assignees($node->nid);
        if(!in_array($account->uid, $assignees)) {
          return NODE_ACCESS_DENY;
        }

      }
    }
  }
}

function dgu_data_set_request_node_access_records($node) {
  if ($node->type == 'dataset_request') {

    $assignees = dgu_data_set_request_publisher_assignee_get_assignees($node->nid);

    $grants = array();
    if (isset($node->field_publication_preference[LANGUAGE_NONE][0]['value']) && $node->field_publication_preference[LANGUAGE_NONE][0]['value'] == 0) {
      // Private request
      $grants[] = array(
        'realm' => 'private_data_request',
        'gid' => DATA_REQUEST_MODERATOR_GRANT,
        'grant_view' => 1,
        'grant_update' => 1,
        'grant_delete' => 1,
        'priority' => 1,
      );
      if ($node->uid) {
        // Grant author permission only if author is not anonymous.
        $grants[] = array(
          'realm' => 'private_data_request',
          'gid' => $node->uid,
          'grant_view' => 1,
          'grant_update' => 1,
          'grant_delete' => 1,
          'priority' => 1,
        );
      }
      if (!empty($assignees)) {
        // Grant permission to all users which are or were assignees in this request.
        foreach($assignees as $assignee_uid) {
          $grants[] = array(
            'realm' => 'private_data_request',
            'gid' => $assignee_uid,
            'grant_view' => 1,
            'grant_update' => 1,
            'grant_delete' => 0,
            'priority' => 1,
          );
        }
      }
    }
    else {
      // Public request
      $grants[] = array(
        'realm' => 'public_data_request',
        'gid' => DATA_REQUEST_MODERATOR_GRANT,
        'grant_view' => 1,
        'grant_update' => 1,
        'grant_delete' => 1,
        'priority' => 1,
      );
      if ($node->uid) {
        // Grant author permission only if author is not anonymous.
        $grants[] = array(
          'realm' => 'public_data_request',
          'gid' => $node->uid,
          'grant_view' => 1,
          'grant_update' => 1,
          'grant_delete' => 1,
          'priority' => 1,
        );
      }
      if (!empty($assignees)) {
        // Grant permission to all users which are or were assignees in this request.
        foreach($assignees as $assignee_uid) {
          $grants[] = array(
            'realm' => 'public_data_request',
            'gid' => $assignee_uid,
            'grant_view' => 1,
            'grant_update' => 1,
            'grant_delete' => 0,
            'priority' => 1,
          );
        }
      }
      if ($node->status == 1) {
        $grants[] = array(
          'realm' => 'public_data_request',
          'gid' => PUBLIC_DATA_REQUEST_GRANT,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 1,
        );
      }
    }
    return $grants;
  }
}

function dgu_data_set_request_node_grants($account, $op) {
  $grants = array();
  $grants['private_data_request'] = array($account->uid);
  $grants['public_data_request'] = array($account->uid, PUBLIC_DATA_REQUEST_GRANT);
  if (user_access(DATA_REQUEST_MODERATION_PERMISSION, $account)) {
    $grants['private_data_request'] = array(DATA_REQUEST_MODERATOR_GRANT);
    $grants['public_data_request'] = array(DATA_REQUEST_MODERATOR_GRANT);
  }
  return $grants;
}


/**
 * Implements hook_assignee_get_users().
 */
function dgu_data_set_request_assignee_get_users($field = NULL, $instance = NULL, $entity_type = NULL, $entity) {

  $query = db_select('role', 'r');
  $query->join('users_roles', 'ur', 'r.rid = ur.rid');
  $query->join('users', 'u', 'u.uid = ur.uid');
  $query->fields('ur', array('uid'))
        ->fields('u', array('name'))
        ->condition('r.name', 'data request administrator');
  $users = $query->execute()->fetchAll();

  $options = array();
  foreach ($users as $user) {
    $options[$user->uid] = $user->name;
  }

  return $options;
}

/**
 * Implements hook_node_presave().
 */
function dgu_data_set_request_node_presave($node) {
  if ($node->type == 'dataset_request') {
    $previous_data_request_revision = &drupal_static('previous_data_request_revision');

    // Workbench moderation uses shutdown function to update the node for the second time in the same request.
    // To avoid messages being created twice we ignore second node update in single request.
    if (isset($previous_data_request_revision)) {
      $updates_to_ignore = &drupal_static('node_updates_to_ignore');
      $updates_to_ignore = isset($updates_to_ignore) ? $updates_to_ignore : array();
      $updates_to_ignore[] = $node->nid;
    }

    // Store previous revision of the node in static cache to be available for comparison in hook_node_update().
    $previous_data_request_revision = node_load($node->nid);
  }
}

/**
 * Implements hook_entity_insert().
 */
function dgu_data_set_request_entity_insert($entity, $type) {
  if($type == 'reply' && $entity->bundle == 'review_comment') {

    // This is taken from message stack examples.
    // It's related to message_notify how it stores rendered subject and body via view modes.
    $options = array(
      'rendered fields' => array(
        'message_notify_email_subject' => 'field_message_rendered_subject',
        'message_notify_email_body' => 'field_message_rendered_body',
      ),
    );
    $data_request_admin_roles = variable_get('dgu_data_set_request_data_request_admin_roles',array(3, 6, 10)); // 3 = administrator, 6 = data publisher, 10 = data request administrator

    // Get data_request_update message bundle and set required fields.
    $message = message_create('data_request_review_comment_new');
    $wrapper = entity_metadata_wrapper('message', $message);
    $data_request_node = new stdClass();
    $data_request_node->nid = $entity->entity_id;
    $wrapper->field_data_request_reference->set($data_request_node);
    $wrapper->field_reply_reference->set($entity);

    $uids = _dgu_data_set_request_get_subscribers($data_request_node->nid, $data_request_admin_roles, FALSE);
    message_subscribe_send_message('node', $data_request_node, $message, $options, array('uids' => $uids));

  }
}

/**
 * Implements hook_node_update().
 */
function dgu_data_set_request_node_update($node) {
  if ($node->type == 'dataset_request') {

    // Ignore second node update in single request.
    // See dgu_data_set_request_node_presave();
    $updates_to_ignore = &drupal_static('node_updates_to_ignore');
    if (is_array($updates_to_ignore) && in_array($node->nid, $updates_to_ignore)) {
      return;
    }

    // Don't create a message about moderation here, there should be
    // an universal message about moderation state change for all content types.
    if (empty($node->workbench_moderation_state_current) && $node->workbench_moderation['current']->from_state == 'needs_review' && $node->workbench_moderation['current']->state == 'published'
      || $node->workbench_moderation['current']->from_state == 'needs_review' && $node->workbench_moderation['current']->state == 'draft') {
      return;
    }

    $previous_data_request_revision = &drupal_static('previous_data_request_revision');
    $previous_rm = isset($previous_data_request_revision->field_assignee[LANGUAGE_NONE][0]['uid']) ? $previous_data_request_revision->field_assignee[LANGUAGE_NONE][0]['uid'] : NULL;
    $previous_publisher_assignee = isset($previous_data_request_revision->field_publisher_assignee[LANGUAGE_NONE][0]['uid']) ? $previous_data_request_revision->field_publisher_assignee[LANGUAGE_NONE][0]['uid'] : NULL;

    $fields_for_short_summary = array('field_review_status' => 'value', 'field_review_outcome' =>'value', 'field_review_notes' => 'value');
    $data_request_admin_roles = variable_get('dgu_data_set_request_data_request_admin_roles',array(3, 6, 10)); // 3 = administrator, 6 = data publisher, 10 = data request administrator

    // This is taken from message stack examples.
    // It's related to message_notify how it stores rendered subject and body via view modes.
    $options = array(
      'rendered fields' => array(
        'message_notify_email_subject' => 'field_message_rendered_subject',
        'message_notify_email_body' => 'field_message_rendered_body',
      ),
    );

    // Use static cache to get this summary available in hook_tokens().
    $summary_of_changes = &drupal_static('data_request_summary_of_changes');

    if (isset($node->field_assignee[LANGUAGE_NONE][0]['uid']) && $previous_rm != $node->field_assignee[LANGUAGE_NONE][0]['uid']
     || isset($node->field_publisher_assignee[LANGUAGE_NONE][0]['uid']) && $previous_publisher_assignee != $node->field_publisher_assignee[LANGUAGE_NONE][0]['uid']) {

      // There is a new publisher assignee or new RM, this is special case where an assignee
      // must receive different message than all other subscribers.
      if (isset($node->field_publisher_assignee[LANGUAGE_NONE][0]['uid']) && $previous_publisher_assignee != $node->field_publisher_assignee[LANGUAGE_NONE][0]['uid']) {
        $assignee = user_load($node->field_publisher_assignee[LANGUAGE_NONE][0]['uid']);
      }
      else {
        $assignee = user_load($node->field_assignee[LANGUAGE_NONE][0]['uid']);
      }

      // Get data_request_assignee message bundle and set required fields.
      $message_assignee = message_create('data_request_assignee');
      $wrapper = entity_metadata_wrapper('message', $message_assignee);
      $wrapper->field_data_request_reference->set($node);
      $wrapper->field_data_request_assignee->set($assignee);

      $default_notifier = variable_get('message_subscribe_default_notifiers', array('email' => 'email'));
      $notifier = isset($assignee->field_digest_notifier[LANGUAGE_NONE][0]['value']) ? array($assignee->field_digest_notifier[LANGUAGE_NONE][0]['value'] => $assignee->field_digest_notifier[LANGUAGE_NONE][0]['value']) : $default_notifier;
      $subscribe_options = array(
        'uids' => array(
          $assignee->uid => array(
            'notifiers' => $notifier,
          ),
        ),
      );

      message_subscribe_send_message('node', $node, $message_assignee, $options, $subscribe_options);

      // Temporarily unsubscribe current assignee to avoid sending two messages
      // to this person (one about being current assignee, second about request update event)
      // if this person was subscribed before (e.g. was already an assignee before).
      flag('unflag', 'subscribe_node', $node->nid, $assignee);

      // Send data_request_update message to all subscribers.
      // First test if particular fields has changed and notify all non admin users.
      if(_dgu_data_set_request_fields_changed($fields_for_short_summary, $node, $previous_data_request_revision)) {

        // Get data_request_update message bundle and set required fields.
        $message_update = message_create('data_request_update');
        $wrapper = entity_metadata_wrapper('message', $message_update);
        $wrapper->field_data_request_reference->set($node);

        $summary_of_changes = _dgu_data_request_get_summary_of_changes($node, $previous_data_request_revision, $fields_for_short_summary);
        $uids = _dgu_data_set_request_get_subscribers($node->nid, $data_request_admin_roles, FALSE);
        message_subscribe_send_message('node', $node, $message_update, $options, array('uids' => $uids));

      }
      // Then notify admin users with full summary of changes.
      // Get data_request_update message bundle and set required fields.
      $message_update = message_create('data_request_update');
      $wrapper = entity_metadata_wrapper('message', $message_update);
      $wrapper->field_data_request_reference->set($node);

      $summary_of_changes = _dgu_data_request_get_summary_of_changes($node, $previous_data_request_revision);
      $uids = _dgu_data_set_request_get_subscribers($node->nid, $data_request_admin_roles);
      message_subscribe_send_message('node', $node, $message_update, $options, array('uids' => $uids));

      // Subscribe an assignee to following notifications about data request updates.
      flag('flag', 'subscribe_node', $node->nid, $assignee);
    }
    else {
      // Something else than assignee has been changed, simply notify all subscribers.
      // First test if particular fields has changed and notify all non admin users.
      if(_dgu_data_set_request_fields_changed($fields_for_short_summary, $node, $previous_data_request_revision)) {
        // Get data_request_update message bundle and set required fields.
        $message_update = message_create('data_request_update');
        $wrapper = entity_metadata_wrapper('message', $message_update);
        $wrapper->field_data_request_reference->set($node);

        $summary_of_changes = _dgu_data_request_get_summary_of_changes($node, $previous_data_request_revision, $fields_for_short_summary);
        $uids = _dgu_data_set_request_get_subscribers($node->nid, $data_request_admin_roles, FALSE);
        message_subscribe_send_message('node', $node, $message_update, $options, array('uids' => $uids));
      }

      // Then notify admin users with full summary of changes.

      // Get data_request_update message bundle and set required fields.
      $message_update = message_create('data_request_update');
      $wrapper = entity_metadata_wrapper('message', $message_update);
      $wrapper->field_data_request_reference->set($node);

      $summary_of_changes = _dgu_data_request_get_summary_of_changes($node, $previous_data_request_revision);
      $uids = _dgu_data_set_request_get_subscribers($node->nid, $data_request_admin_roles);
      message_subscribe_send_message('node', $node, $message_update, $options, array('uids' => $uids));
    }
  }
}


/**
 * Helper function to test if particular fields has changed between revisions.
 */
function _dgu_data_set_request_get_subscribers($nid, $rids, $in_rids = TRUE) {

  // Get all flags on given entity type.
  $flags = message_subscribe_flag_get_flags('node');
  $default_notifier = variable_get('message_subscribe_default_notifiers', array('email' => 'email'));

  $fids = array();
  foreach ($flags as $flag) {
    $fids[$flag->fid] = $flag->name;
  }
  // Query all the entity IDs inside the given flags. We don't use
  // flag_get_content_flags() as we want to get all the flaggings of an
  // entity-type in a single query.
  $query = db_select('flagging', 'f');
  $query->join('users', 'u', 'u.uid = f.uid');
  $query->leftJoin('users_roles', 'ur', 'ur.uid = u.uid');
  $query->leftJoin('field_data_field_digest_notifier', 'fdn', 'fdn.entity_id = u.uid');
  $query->fields('f', array('uid'));
  $query->fields('fdn', array('field_digest_notifier_value'))
    ->distinct()
    ->condition('f.entity_type', 'node')
    ->condition('f.entity_id', $nid)
    ->condition('fid', array_keys($fids), 'IN');

  if ($in_rids == TRUE) {
    $query->condition('ur.rid', $rids, 'IN');
  }
  else {
    $query->condition(db_or()->where('ur.rid NOT IN (' . implode (', ', $rids) . ')')->isNull('ur.rid'));
  }

  $result = $query->execute()->fetchAll();

  $uids = array();
  foreach ($result as $row) {
    $uids[$row->uid]['notifiers'] = isset($row->field_digest_notifier_value) ? array($row->field_digest_notifier_value => $row->field_digest_notifier_value) : $default_notifier;
  }

  return $uids;
}

/**
 * Helper function to test if particular fields has changed between revisions.
 */
function _dgu_data_set_request_fields_changed($fields_for_short_summary, $current_revision, $previous_revision) {
  foreach ($fields_for_short_summary as $field_name => $key) {
    $field_current_revision = isset($current_revision->{$field_name}[LANGUAGE_NONE][0][$key]) ? $current_revision->{$field_name}[LANGUAGE_NONE][0][$key] : NULL;
    $field_previous_revision = isset($previous_revision->{$field_name}[LANGUAGE_NONE][0][$key]) ? $previous_revision->{$field_name}[LANGUAGE_NONE][0][$key] : NULL;
    if ($field_current_revision !== $field_previous_revision) {
      return TRUE;
    }
  }
}

/**
 * Helper function to get summary of changes used in notification about data request update.
 */
function _dgu_data_request_get_summary_of_changes($current_revision, $previous_revision, $fields = array()) {

  //TODO use $fields to render particular summary

  $changes = array();
  $current_request = node_view($current_revision);
  $previous_request = node_view($previous_revision);

  foreach ((array)$current_request['#node'] as $key => $value) {
    // Iterate through all fields.
    if(strpos($key, 'field_') === 0) {
      if(!empty($fields)) {
        if(!in_array($key, array_keys($fields))) {
          continue;
        }
      }

      if ((isset($current_request[$key]['#items']) && !isset($previous_request[$key]['#items']))
       || (!isset($current_request[$key]['#items']) && isset($previous_request[$key]['#items']))
       || (isset($current_request[$key]['#items']) && isset($previous_request[$key]['#items']) && count($current_request[$key]['#items']) != count($previous_request[$key]['#items']))) {
        // If multi value field had different quantity of items it is modified.
        _dgu_data_set_request_render_changes($current_revision, $previous_revision, $key, $changes);
      }
      else {
        // Otherwise compare the values.
        $current_node = clone $current_request['#node'];
        $previous_node = clone $previous_request['#node'];

        if (isset($current_node->{$key}[LANGUAGE_NONE])) {
          foreach ($current_node->{$key}[LANGUAGE_NONE] as $index => &$item) {

            // Fix weird discrepancy on text_log fields, for some reason current revision has
            // only 'value' element, previous revision has also 'safe_value' and 'format'.
            $item['format'] = FALSE;
            $item['safe_value'] = FALSE;
            $previous_node->{$key}[LANGUAGE_NONE][$index]['format'] = FALSE;
            $previous_node->{$key}[LANGUAGE_NONE][$index]['safe_value'] = FALSE;

            if ($item != $previous_node->{$key}[LANGUAGE_NONE][$index]) {
              _dgu_data_set_request_render_changes($current_revision, $previous_revision, $key, $changes);
            }
          }
        }
      }
    }

  }

  if (!empty($changes)) {
    // Render summary.
    $output = "Summary of changes:\n";
    foreach ($changes as $field_name => $diff) {
      $output .= 'Field "' . $field_name . '" changed' . "\n";
      $output .= 'from: ' . $diff['previous'] . "\n";
      $output .= 'to:   ' . $diff['current'] . "\n";
      $output .= "\n";
    }
    return $output;
  }
}

/**
 * Helper function to render changes in a single field.
 */
function _dgu_data_set_request_render_changes($current_revision, $previous_revision, $key, &$changes) {
  $new_value = field_view_field('node', $current_revision, $key);
  $old_value = field_view_field('node', $previous_revision, $key);

  $new_value['#label_display'] = 'hidden';
  $old_value['#label_display'] = 'hidden';

  $title = $new_value['#title'] ? $new_value['#title'] : $old_value['#title'];

  $changes[$title] = array (
    'current' => substr(_dgu_data_set_request_remove_multiple_commas(strip_tags(str_replace('</', ', </', render($new_value)))), 0, -2),
    'previous' => substr(_dgu_data_set_request_remove_multiple_commas(strip_tags(str_replace('</', ', </', render($old_value)))), 0, -2),
  );
}

/**
 * Helper recursive function to get rid of multiple commas added before
 * each closing HTML tag in _dgu_data_set_request_render_changes() function.
 */
function _dgu_data_set_request_remove_multiple_commas($string) {
  $string = str_replace(', , ', ', ', $string);
  if (strpos($string, ', , ') !== FALSE) {
    $string = _dgu_data_set_request_remove_multiple_commas($string);
  }
  return $string;
}


/**
* Implements hook_token_info().
*/
function dgu_data_set_request_token_info() {
  $info['tokens']['message']['data_request-summary_of_changes'] = array(
    'name' => t('Data request - summary of changes'),
    'description' => t('Returns summary of changes in modified data request'),
  );
  return $info;
}
/**
* Implements hook_tokens().
*/
function dgu_data_set_request_tokens($type, $tokens, array $data = array(), array $options = array()) {
 $replacements = array();
   if ($type == 'message') {
     foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'data_request-summary_of_changes':
          $replacements[$original] = drupal_static('data_request_summary_of_changes');
          break;
      }
     }
  }
  return $replacements;
}

/**
 * Implements hook_preprocess_replies().
 */
function  dgu_data_set_request_preprocess_replies(&$variables) {
  if ($variables['bundle'] == 'review_comment' && $variables['entity_type'] == 'node' && !node_access('update', $variables['entity'])) {
    // Hide reply forms for users which haven't got access to edit entity.
    // We need to give them full access to create/update review_comment replies
    // but only on nodes they have permissions to edit, e.g data request assignee grant.
    unset($variables['replies']);
    unset($variables['reply_form']);
  }
}

/**
 * Implements hook_form_FORM_ID_form_alter().
 */
function dgu_data_set_request_form_reply_add_form_alter(&$form, &$form_state, $form_id) {
  if($form['#bundle'] = 'review_comment') {
    $form['field_review_comment'][LANGUAGE_NONE][0]['#title'] = 'Add review note <span class="submitted">(for non-public view)</span>';
    $form['submit']['#value'] = 'Submit review note';
  }
}
